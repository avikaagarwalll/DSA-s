//MERGE TWO SORTED LISTS
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null){
            return list2;
        }
        if(list2==null){
            return list1;
        }
        ListNode result;
        if(list1.val<list2.val){
            result=list1;
            result.next= mergeTwoLists( list1.next ,  list2);
        }
        else{

            result=list2;
            result.next= mergeTwoLists( list1 ,  list2.next);
        }
        return result;
    }
}

//linkedlist cycle
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while (fast != null && fast.next != null)
        fast = fast.next.next;
        slow = slow.next;
        if (fast == slow){
            return true;
        }
   }
                  return false;
    }
}
