// REVERSE LINKED LIST

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */


class Solution {
    public ListNode reverseList(ListNode head) {

        if (head == null) {
            return head;
        }
        ListNode prev = null;
        ListNode present = head;
        ListNode next= present.next;

        while(present != null) {
            present.next = prev;
            prev = present;
            present = next;
            if (next != null){
                next = next.next;
            }

        }
        return prev;
        
     }
}



// Q2 TWO SUM
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
     return new int[]{}; // No solution found
    }
}
