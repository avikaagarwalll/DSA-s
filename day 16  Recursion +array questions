package mypkg;

public class Rec {
    public static void main(String args[]) {
        int[]arr = {2,3,1,4,5};
        System.out.println(find(arr, 4, 0));
        System.out.println(findIndex(arr, 4, 0));
        System.out.println(findIndexLast(arr, 4, arr.length-1));
    }

    static boolean find(int[] arr, int target, int index) {
        if (index == arr.length) {
            return false;
        }
        return arr[index] == target || find(arr, target, index + 1);
    }

    static int findIndex(int[] arr, int target, int index) {
        if (index == arr.length) {
            return -1;
        }
        if (arr[index] == target) {
            return index;
        } else {
            return findIndex(arr, target, index + 1);
            
        }
    }
    static int findIndexLast(int[] arr, int target, int index) {
        if (index == -1) {
            return -1;
        }
        if (arr[index] == target) {
            return index;
        } else {
            return findIndexLast(arr, target, index - 1);
            // return arr[index] == target || find(arr, target, index+1);
        }
    }
}

//PALINDROME LIST

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        if(head == null && head.next == null){
            return true;
        }
        List<Integer> l = new ArrayList<>();
        while(head!=null){
            l.add(head.val);
            head = head.next;
        }
        int start =0;
        int end = l.size()-1;
        while(start<end){
            if(l.get(start) != l.get(end)){
                return false;
               // start ++ ;
                //end --;
            }
               start ++ ;
                end --;
            
        }
        return true;
    }
}



//Number of Steps to Reduce a Number to Zero

class Solution {
    public int numberOfSteps(int num) {
        int steps = 0;
        while(num!= 0){
            if(num % 2 ==0){
                 num =num/2;
                steps++;
            }
            else{
                 num = num - 1;
                steps++;
            }
          
        }
         return steps;

    }
}
