//FIND IN MOUNTAIN ARRAY


/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak = findPeak(mountainArr);
        int firstTry = orderAgnostic(mountainArr,target,0,peak);
        if(firstTry!=-1){
            return firstTry;
        }
        return orderAgnostic(mountainArr,target,peak+1,mountainArr.length()-1);
        
    }
    static int findPeak(MountainArray mountainArr) {
        int start=0;
        int end=mountainArr.length()-1;
        while(start < end) { 
            int mid = start + (end - start) / 2;
           if(mountainArr.get(mid)>mountainArr.get(mid+1)) {
                end=mid;
            }
            else {
                start=mid+1;
            }
        }
        return start;
   }
   static int orderAgnostic(MountainArray mountainArr,int target,int start,int end) {
        boolean asc=mountainArr.get(start) < mountainArr.get(end);
    while(start <= end) {
          int mid = start + (end - start) / 2;
        if(mountainArr.get(mid)==target) {
            return mid;
        }
        if(asc) {
            if(mountainArr.get(mid)>target) {
                end=mid-1;
            }
            else {
                start=mid+1;
            }
        }
        else {
            if(mountainArr.get(mid)<target){
              end=mid-1;
            }
            else {
                start=mid+1;
            }
        }
    }
        return -1;
    }
}

//PEAK INDEX AT ARRAY INDEX

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start =0;
        int end = arr.length-1;
        while(start<end){
            int mid = start+(end-start)/2;

            if(arr[mid]>arr[mid+1]){
                end = mid;
            }
            else{
                start = mid +1;
            }
        }
        return start;
        
    }
}
