// FIND ALL NUMBERS DISAPPEARED IN AN ARRAY

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        for(int i = 0; i<nums.length; i++){
            int index = Math.abs(nums[i])-1;
            if(nums[index]>0){
                nums[index]= -1*nums[index];
            }
          
        }
        List<Integer> list = new ArrayList<>();
        for(int i =0; i<nums.length; i++){
            if(nums[i]>0){
                list.add(i+1);
            }
        }
        return list;
    }
}


// middle of the linked list

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode s = head;
        ListNode f = head;
    
      while(f != null && f.next != null){
        s= s.next;
        f= f.next.next;
    }
    
    return s;
}
}


// print star by using recursion

package mypkg;
class Rec{
    public static void main(String[] args) {
         triangle (4,0);
    }

    static void triangle(int r, int c){
        if(r==0){
            return;
        }
        if(c<r){
            System.out.print("*");
            triangle(r, c+1);
        }
        else{
            System.out.println();
            triangle(r-1,0);
        }
    }
}

