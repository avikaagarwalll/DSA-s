// SWAP PAIRS
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
       
        if (head == null || head.next == null) {
            return head;
        }
        ListNode prev = new ListNode(0);
        //prev = null;
        prev.next = head;
        ListNode curr = prev;

        while (head != null && head.next != null) {
            curr.next = head.next;
            head.next = head.next.next;
            curr.next.next= head;
            curr = curr.next.next;
           
            head = head.next;
        }

        return prev.next;
    }
}

//ISPALINDROME
class Solution {
    public boolean isPalindrome(int x) {
      
      if(x < 0){
          return false;
}


        int reverse = 0;
        int num=x;


        while(x > 0){
            reverse = reverse*10 + x%10;
            x = x/10;
        }

        if(reverse == num)
          return true;

        return false;
    }
}  

    
